<launch>
  <!-- Add AMCL example for differential drive robots for Localization -->
  <!-- Subscribe: /scan, /tf, /initialpose, /map -->
  <!-- Publish: /amcl_pose, /particlecloud, /tf -->
  
  <!-- <include file="$(find amcl)/examples/amcl_diff.launch"/> -->

  <!-- AMCL -->
  
  <node pkg="amcl" type="amcl" name="amcl" output="screen">
    <!-- Publish scans from best pose at a max of 10 Hz -->

    <!-- //All filter parameters -->
    <param name="min_particles" value="500"/>   <!-- //Minimum number of particles allowed, default 100 -->
    <param name="max_particles" value="5000"/>  <!-- //Maximum number of examples allowed, default 5000 -->
    <param name="kld_err" value="0.05"/>        <!-- //The maximum error between the real distribution and the estimated distribution, the default is 0.01 -->
    <param name="kld_z" value="0.99"/>          <!-- //Upper standard quantile (1-p), where p is the probability that the error in the estimated distribution is less than kld_err, the default is 0.99 -->
    <param name="update_min_d" value="0.05"/>    <!-- //The distance of translation before performing filter update, the default is 0.2m (affects the odometer model, when the model is based on the motion and map to find the final pose relief All relevant information in the path is discarded. Only the final pose is known. In order to avoid unreasonable non-zero likelihood after passing through obstacles, this value is recommended not to be greater than the radius of the robot. Otherwise, the difference in update frequency may result in completeness. Different results) -->
    <param name="update_min_a" value="0.05"/>    <!-- //The angle of rotation before performing filter update, default pi/6 rad -->
    <param name="resample_interval" value="1"/> <!-- //The number of filter updates required before resampling, default 2 -->
    <param name="transform_tolerance" value="0.1"/> <!-- //The postponement of the release of tf transform, in order to show that tf transform is available in the future -->
    <param name="recovery_alpha_slow" value="0.0"/> <!-- //The exponential decay frequency of the slow average weight filter, used to determine when to recover by adding a random pose, the default is 0 (disable), maybe 0.001 is a Good value -->
    <param name="recovery_alpha_fast" value="0.0"/> <!-- //The exponential decay frequency of the fast average weight filter, used to determine when to recover by adding a random pose, the default is 0 (disable), maybe 0.1 is good value -->
    <param name="gui_publish_rate" value="10.0"/>   <!-- //The maximum frequency of scanning and path publishing to the visualization software, setting the parameter to -1.0 means that this function is disabled, and the default is -1.0 -->
    <param name="save_pose_rate" value="0.5"/>      <!-- //Store the last estimated pose and covariance to the maximum rate of the parameter server. The saved pose will be used for continuous motion to initialize the filter. -1.0 disability. -->
    <param name="use_map_topic" value="true"/>     <!-- //When set to true, AMCL will subscribe to the map topic instead of calling the service to return the map. That is to say, when set to true, another node publishes the map topic in real time, that is, the robot builds the map in real time and provides the amcl topic for use; when set to false, through the map server, that is, the call has been Build the completed map. New parameters added in navigation 1.4.2. -->
    <param name="first_map_only" value="false"/>    <!-- //When set to true, AMCL will only use the first map subscribed instead of updating to a new map every time a new one is received. New parameters added in navigation 1.4.2. -->

    <!-- //Laser model parameters -->
    <param name="laser_min_range" value="-1.0"/>    <!-- //The minimum scan range to be considered; when the parameter is set to -1.0, the minimum scan range reported by the laser will be used -->
    <param name="laser_max_range" value="-1.0"/>    <!-- //The maximum scanning range to be considered; when the parameter is set to -1.0, the maximum scanning range reported by the laser will be used -->
    <param name="laser_max_beams" value="30"/>      <!-- //When updating the filter, how many equally spaced beams are used in each scan (reducing the amount of calculation, the adjacent beams in the ranging scan are often not independent Can reduce the influence of noise, too small will cause less information and inaccurate positioning) -->

    <param name="laser_z_hit" value="0.5"/>//The mixed weight of the z_hit part of the model, the default is 0.95 (mixed weight 1. The correct range with local measurement noise-the measured distance approximates the true distance as the mean value, (Laser_sigma_hit is the weight of the Gaussian distribution of standard deviation)
    <param name="laser_z_short" value="0.05"/>//The mixed weight of the z_short part of the model, the default is 0.1 (mixed weight 2. Unexpected object weight (similar to unary index symmetry about the y axis 0～measured distance (not The maximum distance) part: --ηλe^(-λz), the rest is 0, where η is a normalized parameter, λ is laser_lambda_short, and z is an independent measurement value at time t (a ranging value, ranging sensor A measurement usually produces a series of measurement values)), dynamic environment, such as people or moving objects)
    <param name="laser_z_max" value="0.05"/>//The mixing weight of the z_max part of the model, the default is 0.05 (mixing weight 3. Measurement failure weight (the maximum distance is 1, the rest is 0), such as a sonar mirror Reflection, laser black light-absorbing object or measurement under strong light, the most typical is beyond the maximum distance)
    <param name="laser_z_rand" value="0.5"/>//The mixed weight of the z_rand part of the model, the default is 0.05 (mixed weight 4. Random measurement weight-uniform distribution (1 is evenly distributed to 0 to the maximum measurement range) , Completely unexplainable measurements, such as multiple reflections of sonar, sensor crosstalk)
    <param name="laser_sigma_hit" value="0.2"/>//The standard deviation of the Gaussian model used in the z_hit part of the model, the default is 0.2m
    <param name="laser_lambda_short" value="0.1"/>//Exponential decay parameter of the z_short part of the model, the default is 0.1 (according to ηλe^(-λz), the greater the λ, the faster the probability of accidental objects decays with the increase in distance)
    <param name="laser_likelihood_max_dist" value="2.0"/>//The maximum distance of obstacle expansion on the map, used as the likelihood_field model (likelihood_field_range_finder_model only describes the distance of the nearest obstacle, (currently it should be within this distance) Obstacle expansion processing, but there is no mention of expansion in the algorithm, and it is not clear what it means). Here the algorithm uses the above laser_sigma_hit. The algorithm for calculating the probability of measurement in the likelihood domain is to take each measurement at time t (throw down to the maximum The probability of the measurement value of the measurement range) is multiplied, the probability of a single measurement: Zh * prob(dist, σ) +avg, Zh is laser_z_hit, avg is the uniform distribution probability, dist is the distance to the nearest obstacle, and prob is 0 as the central standard deviation Is the distance probability of the Gaussian distribution of σ (laser_sigma_hit))
    <param name="laser_model_type" value="likelihood_field"/>//Model use, can be beam, likehood_field, likehood_field_prob (same as likelihood_field but integrated beamskip features-official website comments), the default is "likehood_field" 

   //Odometer model parameters
    <!--
    The ××× odometer model does not involve the robot drifting or slipping. Once such a situation occurs, the subsequent positioning is basically invalid. Although the Augmented_MCL has failure recovery, it takes too long in actual operation and the result is not ideal (the position is unexpected Jump, this is very unreasonable, maybe the parameter configuration is not very good)
    -->
    <param name="odom_model_type" value="diff"/>//Model use, can be "diff", "omni", "diff-corrected", "omni-corrected", the latter two are for the old version of the odometer For model correction, the corresponding odometer parameters need to be reduced to a certain extent
    <param name="odom_alpha1" value="0.2"/>//Specify the expected noise of the odometer rotation estimated by the rotation component of the robot motion part, the default is 0.2 (rotation noise exists in rotation)
    <param name="odom_alpha2" value="0.2"/>//Formulate the expected noise of odometer rotation estimated by the translation component of the robot's motion part, the default is 0.2 (translation noise may appear during rotation)
    <!-- translation std dev, m -->
    <param name="odom_alpha3" value="0.8"/>//Specify the expected noise of the odometer translation estimated by the translation component of the robot motion part, the default is 0.2 (similar to the above)
    <param name="odom_alpha4" value="0.2"/>//Specify the expected noise of the odometer translation estimated by the rotation component of the robot motion part, the default is 0.2 (similar to the above)
    <param name="odom_alpha5" value="0.1"/>//Noise parameters related to translation (only used when the model is "omni"-the comment on the official wiki website)
    <param name="odom_frame_id" value="odom"/>//The coordinate system used by the odometer by default
    <param name="base_frame_id" value="base_footprint"/>//Used as the base coordinate system of the robot
    <param name="global_frame_id" value="map"/>//The name of the coordinate system published by the positioning system
    <param name="tf_broadcast" value="true"/>//Set to false to prevent amcl from publishing the tf transformation between the global coordinate system and the odometer coordinate system

   //Robot initialization data settings
    <param name="initial_pose_x" value="0.0"/>//The mean initial pose (x), used to initialize the Gaussian distribution filter. (The initial_pose_ parameter determines the center of the initial pose particle set range)
    <param name="initial_pose_y" value="0.0"/>//Initial pose mean value (y), used to initialize Gaussian distribution filter. (Same as above)
    <param name="initial_pose_a" value="0.0"/>//Initial pose mean (yaw), used to initialize Gaussian distribution filter. (Particle orientation)
    <param name="initial_cov_xx" value="0.5*0.5"/>//Initial pose covariance (x*x), used to initialize Gaussian distribution filter. (The initial_cov_ parameter determines the range of the initial particle set)
    <param name="initial_cov_yy" value="0.5*0.5"/>//Initial pose covariance (y*y), used to initialize Gaussian distribution filter. (Same as above)
    <param name="initial_cov_aa" value="(π/12)*(π/12)"/>//Initial pose covariance (yaw*yaw), used to initialize Gaussian distribution filter. (Deviation of particle orientation)
  </node>
    
</launch>
